/*
 * Gui.java
 *
 * Created on 26. Oktober 2007, 00:33
 */

package schemaspygui;

import javax.swing.*;
import javax.swing.UIManager;
import java.io.File;
import java.util.Properties;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.String;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author  joachim uhl; mailto:admin@joachim-uhl.de; http://www.joachim-uhl.de/projekte/schemaspygui/
 */
public class Gui extends javax.swing.JFrame {
    
    /** Creates new form Gui */
    public Gui() {
        setLookandFeel();
        initParams();
        initComponents();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor of NetBeans IDE.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        reqParamPanel = new javax.swing.JPanel();
        lbl_DBType = new javax.swing.JLabel();
        dbTypeCBox = new javax.swing.JComboBox();
        lbl_PathtoDBdrvr = new javax.swing.JLabel();
        lbl_DBName = new javax.swing.JLabel();
        lbl_DBHost = new javax.swing.JLabel();
        lbl_DBPort = new javax.swing.JLabel();
        lbl_DBUser = new javax.swing.JLabel();
        lbl_DBPwd = new javax.swing.JLabel();
        lbl_PathSchemSpy = new javax.swing.JLabel();
        dbPwdField = new javax.swing.JPasswordField();
        dbUserTField = new javax.swing.JTextField();
        dbNameTField = new javax.swing.JTextField();
        dbHostTField = new javax.swing.JTextField();
        dbPortTField = new javax.swing.JTextField();
        dbDriverPTField = new javax.swing.JTextField();
        driverButton = new javax.swing.JButton();
        sSpyPathTField = new javax.swing.JTextField();
        sSpyPathButton = new javax.swing.JButton();
        propertiePathTField = new javax.swing.JTextField();
        propertiePathButton = new javax.swing.JButton();
        lbl_PropertiePath = new javax.swing.JLabel();
        optionalPanel = new javax.swing.JPanel();
        lbl_OutDir = new javax.swing.JLabel();
        lbl_Schema = new javax.swing.JLabel();
        lbl_TableRegEx = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        outDirButton = new javax.swing.JButton();
        pathOutputTField = new javax.swing.JTextField();
        schemaTField = new javax.swing.JTextField();
        tNameRExTField = new javax.swing.JTextField();
        cNameRExTField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descTArea = new javax.swing.JTextArea();
        flagsPanel = new javax.swing.JPanel();
        aHTMLCBox = new javax.swing.JCheckBox();
        comIDisCBox = new javax.swing.JCheckBox();
        noTComCBox = new javax.swing.JCheckBox();
        noHTMLCBox = new javax.swing.JCheckBox();
        dincFKCBox = new javax.swing.JCheckBox();
        outputPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sSpyOutTArea = new javax.swing.JTextArea();
        startSSpyButton = new javax.swing.JButton();
        showSchemaButton = new javax.swing.JButton();
        saveParamButton = new javax.swing.JButton();
        loadParamButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        sParamMenuItem = new javax.swing.JMenuItem();
        lParamMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        helpMenueAboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SchemaSpyGUI by Joachim Uhl, http://www.joachim-uhl.de/projekte/schemaspygui/");

        jPanel5.setName("null"); // NOI18N

        reqParamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Required parameters"));

        lbl_DBType.setText("DB Type:"); // NOI18N

        dbTypeCBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "db2", "db2net", "firebird", "hsqldb", "mssql", "mysql", "ora", "orathin", "pgsql", "sybase", "sybase2", "udbt4" }));
        dbTypeCBox.setToolTipText("Choose your type of database");

        lbl_PathtoDBdrvr.setText("Path to DB driver:"); // NOI18N

        lbl_DBName.setText("DB name:"); // NOI18N

        lbl_DBHost.setText("DB Host:"); // NOI18N

        lbl_DBPort.setText("DB Port:"); // NOI18N

        lbl_DBUser.setText("DB User:"); // NOI18N

        lbl_DBPwd.setText("DB Password:"); // NOI18N

        lbl_PathSchemSpy.setText("Path to SchemaSpy:"); // NOI18N

        driverButton.setText("Choose"); // NOI18N
        driverButton.setToolTipText("Click to choose the path to database driver file"); // NOI18N
        driverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverButtonActionPerformed(evt);
            }
        });

        sSpyPathButton.setText("Choose"); // NOI18N
        sSpyPathButton.setToolTipText("Click to choose the path to SchemaSpy"); // NOI18N
        sSpyPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sSpyPathButtonActionPerformed(evt);
            }
        });

        propertiePathButton.setText("Choose"); // NOI18N
        propertiePathButton.setToolTipText("Click to choose the path to your database specific propertie file"); // NOI18N
        propertiePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiePathButtonActionPerformed(evt);
            }
        });

        lbl_PropertiePath.setText("Path propertie file:"); // NOI18N

        org.jdesktop.layout.GroupLayout reqParamPanelLayout = new org.jdesktop.layout.GroupLayout(reqParamPanel);
        reqParamPanel.setLayout(reqParamPanelLayout);
        reqParamPanelLayout.setHorizontalGroup(
            reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, reqParamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(reqParamPanelLayout.createSequentialGroup()
                            .add(4, 4, 4)
                            .add(lbl_DBUser))
                        .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(lbl_DBName)
                            .add(lbl_DBHost)))
                    .add(lbl_DBType))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, dbTypeCBox, 0, 151, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, dbNameTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, dbUserTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, dbHostTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                .add(8, 8, 8)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lbl_DBPort)
                    .add(lbl_DBPwd))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(dbPortTField)
                    .add(dbPwdField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                .add(93, 93, 93))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, reqParamPanelLayout.createSequentialGroup()
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, reqParamPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(lbl_PathtoDBdrvr)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dbDriverPTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, reqParamPanelLayout.createSequentialGroup()
                        .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lbl_PathSchemSpy)
                            .add(lbl_PropertiePath))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, propertiePathTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .add(sSpyPathTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(sSpyPathButton)
                        .add(driverButton))
                    .add(propertiePathButton))
                .addContainerGap())
        );
        reqParamPanelLayout.setVerticalGroup(
            reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(reqParamPanelLayout.createSequentialGroup()
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dbTypeCBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_DBType))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbl_DBPort)
                    .add(dbPortTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dbHostTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_DBHost))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dbNameTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_DBName))
                .add(6, 6, 6)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbl_DBUser)
                    .add(dbUserTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_DBPwd)
                    .add(dbPwdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbl_PathtoDBdrvr)
                    .add(dbDriverPTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(driverButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbl_PathSchemSpy)
                    .add(sSpyPathButton)
                    .add(sSpyPathTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reqParamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(propertiePathTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(propertiePathButton)
                    .add(lbl_PropertiePath))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Optional"));

        lbl_OutDir.setText("Output directory:"); // NOI18N

        lbl_Schema.setText("Schema to explore:"); // NOI18N

        lbl_TableRegEx.setText("Table name RegExp:"); // NOI18N

        jLabel12.setText("Column name RegExp:"); // NOI18N

        jLabel13.setText("Description on summary page:"); // NOI18N

        outDirButton.setText("Choose"); // NOI18N
        outDirButton.setToolTipText("Click to choose the path to your SchemaSpy output dir. You can leave this blank. SchemaSpyGUI will generate a path out of your db-name, db-user and db-schema name"); // NOI18N
        outDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirButtonActionPerformed(evt);
            }
        });

        descTArea.setColumns(20);
        descTArea.setRows(5);
        jScrollPane2.setViewportView(descTArea);

        org.jdesktop.layout.GroupLayout optionalPanelLayout = new org.jdesktop.layout.GroupLayout(optionalPanel);
        optionalPanel.setLayout(optionalPanelLayout);
        optionalPanelLayout.setHorizontalGroup(
            optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, optionalPanelLayout.createSequentialGroup()
                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optionalPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(optionalPanelLayout.createSequentialGroup()
                                .add(lbl_TableRegEx)
                                .add(17, 17, 17))
                            .add(optionalPanelLayout.createSequentialGroup()
                                .add(jLabel12)
                                .add(18, 18, 18))
                            .add(optionalPanelLayout.createSequentialGroup()
                                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(lbl_OutDir)
                                    .add(lbl_Schema))
                                .add(18, 18, 18)))
                        .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cNameRExTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .add(tNameRExTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .add(schemaTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, optionalPanelLayout.createSequentialGroup()
                                .add(pathOutputTField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(outDirButton))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel13))
                .addContainerGap())
        );
        optionalPanelLayout.setVerticalGroup(
            optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionalPanelLayout.createSequentialGroup()
                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(outDirButton)
                    .add(pathOutputTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_OutDir))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(schemaTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_Schema))
                .add(7, 7, 7)
                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tNameRExTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbl_TableRegEx))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cNameRExTField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel13)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27))
        );

        flagsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Flags"));

        aHTMLCBox.setText("Allow HTML in comments"); // NOI18N
        aHTMLCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aHTMLCBoxActionPerformed(evt);
            }
        });

        comIDisCBox.setText("Comments initially displayed"); // NOI18N
        comIDisCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comIDisCBoxActionPerformed(evt);
            }
        });

        noTComCBox.setText("No table comments"); // NOI18N
        noTComCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noTComCBoxActionPerformed(evt);
            }
        });

        noHTMLCBox.setText("No HTML"); // NOI18N
        noHTMLCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noHTMLCBoxActionPerformed(evt);
            }
        });

        dincFKCBox.setText("Don't include foreign key"); // NOI18N
        dincFKCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dincFKCBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout flagsPanelLayout = new org.jdesktop.layout.GroupLayout(flagsPanel);
        flagsPanel.setLayout(flagsPanelLayout);
        flagsPanelLayout.setHorizontalGroup(
            flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(flagsPanelLayout.createSequentialGroup()
                .add(flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(noTComCBox)
                    .add(flagsPanelLayout.createSequentialGroup()
                        .add(flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(aHTMLCBox)
                            .add(comIDisCBox))
                        .add(29, 29, 29)
                        .add(flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dincFKCBox)
                            .add(noHTMLCBox))))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        flagsPanelLayout.setVerticalGroup(
            flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(flagsPanelLayout.createSequentialGroup()
                .add(flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(aHTMLCBox)
                    .add(noHTMLCBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(flagsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comIDisCBox)
                    .add(dincFKCBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(noTComCBox))
        );

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SchemaSpy Output"));

        sSpyOutTArea.setColumns(20);
        sSpyOutTArea.setEditable(false);
        sSpyOutTArea.setRows(5);
        sSpyOutTArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(sSpyOutTArea);

        org.jdesktop.layout.GroupLayout outputPanelLayout = new org.jdesktop.layout.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );

        startSSpyButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        startSSpyButton.setText("Start SchemaSpy"); // NOI18N
        startSSpyButton.setToolTipText("Click to start SchemaSpy");
        startSSpyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSSpyButtonActionPerformed(evt);
            }
        });

        showSchemaButton.setText("Show Schema Output"); // NOI18N
        showSchemaButton.setToolTipText("Click to show the HTML output");
        showSchemaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSchemaButtonActionPerformed(evt);
            }
        });

        saveParamButton.setText("Save Parameters"); // NOI18N
        saveParamButton.setToolTipText("Click to save your actual settings");
        saveParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveParamButtonActionPerformed(evt);
            }
        });

        loadParamButton.setText("Load Parameters"); // NOI18N
        loadParamButton.setToolTipText("Click to load your last saved settings");
        loadParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadParamButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(reqParamPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(flagsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(optionalPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(showSchemaButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(startSSpyButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(39, 39, 39)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(loadParamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(saveParamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .add(53, 53, 53))))
            .add(outputPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionalPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .add(reqParamPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(startSSpyButton)
                            .add(saveParamButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(showSchemaButton)
                            .add(loadParamButton)))
                    .add(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(flagsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(outputPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("File"); // NOI18N

        sParamMenuItem.setText("Save Parameters"); // NOI18N
        sParamMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sParamMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(sParamMenuItem);

        lParamMenuItem.setText("Load Parameters"); // NOI18N
        lParamMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lParamMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(lParamMenuItem);

        exitMenuItem.setText("Exit"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        infoMenu.setText("Help"); // NOI18N
        infoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoMenuActionPerformed(evt);
            }
        });

        helpMenueAboutItem.setText("About"); // NOI18N
        helpMenueAboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenueAboutItemActionPerformed(evt);
            }
        });
        infoMenu.add(helpMenueAboutItem);

        jMenuBar1.add(infoMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aHTMLCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aHTMLCBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_aHTMLCBoxActionPerformed

    private void comIDisCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comIDisCBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_comIDisCBoxActionPerformed

    private void noTComCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noTComCBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_noTComCBoxActionPerformed

    private void noHTMLCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noHTMLCBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_noHTMLCBoxActionPerformed

    private void dincFKCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dincFKCBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dincFKCBoxActionPerformed

    private void driverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverButtonActionPerformed
        setPath("driverDirPath");
    }//GEN-LAST:event_driverButtonActionPerformed

    private void sSpyPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sSpyPathButtonActionPerformed
        setPath("sSpyFilePath");
}//GEN-LAST:event_sSpyPathButtonActionPerformed

    private void startSSpyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSSpyButtonActionPerformed
        String run_command;
        String displ_command;
        
        sSpyOutTArea.setText("");
        
        if (checkPath()) {
            run_command = buildCommand("run");
            displ_command = buildCommand("displ");
        
            op = new Operations(this, run_command, displ_command);
            Thread t1 = new Thread(op);
            t1.start();
        }
        
        
}//GEN-LAST:event_startSSpyButtonActionPerformed

    private void outDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirButtonActionPerformed
        setPath("outDirPath");
}//GEN-LAST:event_outDirButtonActionPerformed

    private void saveParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveParamButtonActionPerformed
        saveParam();
    }//GEN-LAST:event_saveParamButtonActionPerformed

    private void sParamMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sParamMenuItemActionPerformed
        saveParam();
}//GEN-LAST:event_sParamMenuItemActionPerformed

    private void lParamMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lParamMenuItemActionPerformed
        loadParam();
}//GEN-LAST:event_lParamMenuItemActionPerformed

    private void showSchemaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSchemaButtonActionPerformed
        showOutput();
    }//GEN-LAST:event_showSchemaButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        systemEnd();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void infoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoMenuActionPerformed
       
    }//GEN-LAST:event_infoMenuActionPerformed

    private void helpMenueAboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenueAboutItemActionPerformed
        showAbout();
}//GEN-LAST:event_helpMenueAboutItemActionPerformed

    private void propertiePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiePathButtonActionPerformed
        setPath("propertiePath");
}//GEN-LAST:event_propertiePathButtonActionPerformed

    private void loadParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadParamButtonActionPerformed
        loadParam();
}//GEN-LAST:event_loadParamButtonActionPerformed

    private void showAbout() {
        JDialog aboutBox = new AboutBox(this);
        aboutBox.setVisible(true);
    }
    
    private void setLookandFeel() {
        try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch(Exception e) {
                e.printStackTrace();
            }
    }

    private void initParams() {
        params = new Properties();
        sSpyPathTField = null;
        dbDriverPTField = null;
        pathOutputTField = null;
    }

    public void setText (String text) {
        sSpyOutTArea.append(text);
    }

    private void setPath (String button) {
            String openDialogDefaultPath = "";
            
            if (button.equals("driverDirPath")) {
                if (!dbDriverPTField.getText().equals("")) {
                        openDialogDefaultPath = makePathUsable(dbDriverPTField.getText());
                } 
            } 
            if (button.equals("outDirPath")) {
                if (!pathOutputTField.getText().equals("")) {
                        openDialogDefaultPath = makePathUsable(pathOutputTField.getText());
                } 
            }
            if (button.equals("sSpyFilePath")) {
                if (!sSpyPathTField.getText().equals("")) {
                        openDialogDefaultPath = makePathUsable(sSpyPathTField.getText());
                } 
            }
            if (button.equals("propertiePath")) {
                if (!propertiePathTField.getText().equals("")) {
                        openDialogDefaultPath = makePathUsable(propertiePathTField.getText());
                } 
            }
            
        JFileChooser openDialog = new JFileChooser(openDialogDefaultPath); 

        if (button.equals("driverDirPath")) {
            openDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } 
        if (button.equals("outDirPath")) {
            openDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        if (button.equals("sSpyFilePath")) {
            openDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }
        if (button.equals("propertiePath")) {
            openDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }

        openDialog.setDialogType(JFileChooser.OPEN_DIALOG);

        int returnVal = openDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = openDialog.getSelectedFile().getAbsolutePath();
            if (button.equals("driverDirPath")) {
                dbDriverPTField.setText(path);
            } 
            if (button.equals("outDirPath")) {
                pathOutputTField.setText(path);
            }
            if (button.equals("sSpyFilePath")) {
                sSpyPathTField.setText(path);
            }
            if (button.equals("propertiePath")) {
                propertiePathTField.setText(path);
            }

        }
    }

    private String getCBoxString (JCheckBox cBox) {
        if (cBox.isSelected()) {
            return "true";
        } else {
            return "false";
        }
    }

    private void saveParam() {

        params.setProperty("dbTypeCBox",(String)dbTypeCBox.getSelectedItem());

        params.setProperty("dbHostTField",dbHostTField.getText());
        params.setProperty("dbNameTField",dbNameTField.getText());
        params.setProperty("dbPortTField",dbPortTField.getText());
        params.setProperty("dbUserTField",dbUserTField.getText());

        params.setProperty("dbDriverPTField",dbDriverPTField.getText());
        params.setProperty("pathOutputTField",pathOutputTField.getText());
        params.setProperty("sSpyPathTField",sSpyPathTField.getText());
        params.setProperty("propertiePathTField",propertiePathTField.getText());

        params.setProperty("schemaTField",schemaTField.getText());
        params.setProperty("descTArea",descTArea.getText());
        params.setProperty("cNameRExTField",cNameRExTField.getText());
        params.setProperty("tNameRExTField",tNameRExTField.getText());

        params.setProperty("aHTMLCBox",getCBoxString(aHTMLCBox));
        params.setProperty("comIDisCBox",getCBoxString(comIDisCBox));
        params.setProperty("dincFKCBox",getCBoxString(dincFKCBox));
        params.setProperty("noHTMLCBox",getCBoxString(noHTMLCBox));
        params.setProperty("noTComCBox",getCBoxString(noTComCBox));

        try {
            FileOutputStream fos = new FileOutputStream("sSpyGUIini.xml");
            params.storeToXML(fos, "Saved parameters for SchemaSpyGUI. Load it with menu point: Load Parameters");
            fos.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

    }

    private void loadParam() {
        File file = new File("sSpyGUIini.xml");
        if (file.exists()) {
            try {
                FileInputStream in = new FileInputStream("sSpyGUIini.xml");
                params.loadFromXML(in);
                in.close();
                clearAllFields();
                insertInFields();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }  
        }

    }

    private void insertInFields () {
        dbTypeCBox.setSelectedItem(params.getProperty("dbTypeCBox"));

        dbHostTField.setText(params.getProperty("dbHostTField"));
        dbNameTField.setText(params.getProperty("dbNameTField"));
        dbPortTField.setText(params.getProperty("dbPortTField"));
        dbUserTField.setText(params.getProperty("dbUserTField"));

        dbDriverPTField.setText(params.getProperty("dbDriverPTField"));
        pathOutputTField.setText(params.getProperty("pathOutputTField"));
        sSpyPathTField.setText(params.getProperty("sSpyPathTField"));
        propertiePathTField.setText(params.getProperty("propertiePathTField"));

        schemaTField.setText(params.getProperty("schemaTField"));
        descTArea.setText(params.getProperty("descTArea"));
        cNameRExTField.setText(params.getProperty("cNameRExTField"));
        tNameRExTField.setText(params.getProperty("tNameRExTField"));

        if (params.getProperty("aHTMLCBox").equals("true")) {aHTMLCBox.setSelected(true);}
        if (params.getProperty("comIDisCBox").equals("true")) {comIDisCBox.setSelected(true);}
        if (params.getProperty("dincFKCBox").equals("true")) {dincFKCBox.setSelected(true);}
        if (params.getProperty("noHTMLCBox").equals("true")) {noHTMLCBox.setSelected(true);}
        if (params.getProperty("noTComCBox").equals("true")) {noTComCBox.setSelected(true);}
    }

    private void clearAllFields() {

        dbTypeCBox.setSelectedItem("");

        dbHostTField.setText("");
        dbNameTField.setText("");
        dbPortTField.setText("");
        dbUserTField.setText("");

        dbPwdField.setText("");

        dbDriverPTField.setText("");
        pathOutputTField.setText("");
        sSpyPathTField.setText("");
        propertiePathTField.setText("");

        schemaTField.setText("");
        descTArea.setText("");
        cNameRExTField.setText("");
        tNameRExTField.setText("");

        aHTMLCBox.setSelected(false);
        comIDisCBox.setSelected(false);
        dincFKCBox.setSelected(false);
        noHTMLCBox.setSelected(false);
        noTComCBox.setSelected(false);   
    }

    private String makePathUsable(String s) {
        s.replace("\\","\\\\");
        return s;
    }
    
    private boolean checkPath() {
        boolean bool = false;
        File sSpyPath = new File(sSpyPathTField.getText());
        File dbDriverPath = new File(dbDriverPTField.getText());
        File outDirPath = new File(pathOutputTField.getText());
        
        if (sSpyPath.exists()) {
            bool = true;
        } else {
            setText("This is not a valid path to SchemaSpy: " + sSpyPathTField.getText()+ "\n");
            if (!sSpyPath.canRead()) {
                setText("Jar File ist not readable! \n");
            }
        }
        
        if (dbDriverPTField.getText().equals("")) {
            setText("You have not specified a driver path. SchemaSpy will try to \n" +
                    "use the path in internal .properties file. \n" +
                    "It's possible that these will not work. In this case, please specify a path. \n");
        } else {
            if (!dbDriverPath.exists() || !dbDriverPath.canRead()) {
                if (bool) {bool = false;}
                setText("This is not a valid path to the DB driver: " + dbDriverPTField.getText() + "\n");
                if (!dbDriverPath.canRead()) {
                    setText("File ist not readable! \n");
                }
            }
        }
        

        
        if (!pathOutputTField.getText().equals("") & !outDirPath.exists() && !outDirPath.canWrite()) {
            if (bool){bool = false;}            
            setText("This is not a valid path for the output directory: " + pathOutputTField.getText() + "\n");
            if (!sSpyPath.canWrite()) {
                setText("SchemaSpy can not write! \n");
            }
        }        
        
        
        return bool;
    }
    
    private String buildOutputDir () {
            String dirName = dbUserTField.getText() + "_" + dbNameTField.getText()
                             + "_" + schemaTField.getText();
            File dir = new File(dirName);
            if(!dir.exists()) {
               dir.mkdir(); 
            }
            String dirPath = dir.getAbsolutePath();
            pathOutputTField.setText(dirPath);
            return dirPath;
    }
    
    private void showOutput() {        
        if (!pathOutputTField.getText().equals("")) {
            String url = makePathUsable(pathOutputTField.getText()) +File.separator + "index.html";
            LaunchSchemaOutput show = new LaunchSchemaOutput(url);
            show.launch();
        } else {
                   
        }
    }

    private String buildCommand (String type) {
        
        //first the path to SchemaSpy.jar
        String s = "java -jar " + makePathUsable(sSpyPathTField.getText());
        
        //second the path to the driver for the selected DB type
        if (!dbDriverPTField.getText().equals("")) {
                s = s + " -cp " + makePathUsable(dbDriverPTField.getText());
        }
        
        //then the needed database type
        if (!((String)dbTypeCBox.getSelectedItem()).equals("")) {
            s = s + " -t " + (String)dbTypeCBox.getSelectedItem();
        }
        
        //and now the necessary database specific informations
        //e.g. database name, schema, user, host etc.
        if (!dbNameTField.getText().equals("")) {
            s = s + " -db " + dbNameTField.getText();
        }
        
        if (!schemaTField.getText().equals("")) {
            s = s + " -s " + schemaTField.getText();
        }
        
        if (!dbHostTField.getText().equals("")) {
            s = s + " -host " + dbHostTField.getText();
        }
        
        if (!dbPortTField.getText().equals("")) {
            s = s + " -port " + dbPortTField.getText();
        }
        
        if (!dbUserTField.getText().equals("")) {
            s = s + " -u " + dbUserTField.getText();
        }
        
        if (!propertiePathTField.getText().equals("")) {
            s = s + " -t " + makePathUsable(propertiePathTField.getText());
        }
        
        //now the optional informations like RegEx for columns, tables
        
        if (!cNameRExTField.getText().equals("")) {
            s = s + " -x " + makePathUsable(cNameRExTField.getText());
        }        

        if (!tNameRExTField.getText().equals("")) {
            s = s + " -i " + makePathUsable(tNameRExTField.getText());
        }

        if (!descTArea.getText().equals("")) {
            s = s + " -desc " + "\" " +makePathUsable(descTArea.getText()) + " \"";
        }
        
        if (!pathOutputTField.getText().equals("")) {
                s = s + " -o " + makePathUsable(pathOutputTField.getText());
        } else {
                s = s + " -o " + makePathUsable(buildOutputDir());   
        }
        
        //now we insert the flags (e.g. Allow HTML in comments) if there are 
        //some checked
        if (aHTMLCBox.isSelected()) {
            s = s + " -ahic ";
        }

        if (comIDisCBox.isSelected()) {
            s = s + " -cid ";
        }
        
        if (dincFKCBox.isSelected()) {
            s = s + " -noimplied ";
        }
        
        if (noHTMLCBox.isSelected()) {
            s = s + " -nohtml ";
        }
        
        if (noTComCBox.isSelected()) {
            s = s + " -notablecomments ";
        }
        
        //last but not least String with no password if "displ" is selected
        //else String + PWD for starting SchemaSpy
        if (type.equals("displ")) {
          return s;
        } else {
            if (!String.valueOf(dbPwdField.getPassword()).equals("")) {
                s = s + " -p " + String.valueOf(dbPwdField.getPassword());
            }
            return s;
        }

    }
    
    private void systemEnd() {
        System.exit(0);
    }
    
    private JDialog aboutBox;
    private Operations op;
    private Properties params;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aHTMLCBox;
    private javax.swing.JTextField cNameRExTField;
    private javax.swing.JCheckBox comIDisCBox;
    private javax.swing.JTextField dbDriverPTField;
    private javax.swing.JTextField dbHostTField;
    private javax.swing.JTextField dbNameTField;
    private javax.swing.JTextField dbPortTField;
    private javax.swing.JPasswordField dbPwdField;
    private javax.swing.JComboBox dbTypeCBox;
    private javax.swing.JTextField dbUserTField;
    private javax.swing.JTextArea descTArea;
    private javax.swing.JCheckBox dincFKCBox;
    private javax.swing.JButton driverButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel flagsPanel;
    private javax.swing.JMenuItem helpMenueAboutItem;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem lParamMenuItem;
    private javax.swing.JLabel lbl_DBHost;
    private javax.swing.JLabel lbl_DBName;
    private javax.swing.JLabel lbl_DBPort;
    private javax.swing.JLabel lbl_DBPwd;
    private javax.swing.JLabel lbl_DBType;
    private javax.swing.JLabel lbl_DBUser;
    private javax.swing.JLabel lbl_OutDir;
    private javax.swing.JLabel lbl_PathSchemSpy;
    private javax.swing.JLabel lbl_PathtoDBdrvr;
    private javax.swing.JLabel lbl_PropertiePath;
    private javax.swing.JLabel lbl_Schema;
    private javax.swing.JLabel lbl_TableRegEx;
    private javax.swing.JButton loadParamButton;
    private javax.swing.JCheckBox noHTMLCBox;
    private javax.swing.JCheckBox noTComCBox;
    private javax.swing.JPanel optionalPanel;
    private javax.swing.JButton outDirButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTextField pathOutputTField;
    private javax.swing.JButton propertiePathButton;
    private javax.swing.JTextField propertiePathTField;
    private javax.swing.JPanel reqParamPanel;
    private javax.swing.JMenuItem sParamMenuItem;
    private javax.swing.JTextArea sSpyOutTArea;
    private javax.swing.JButton sSpyPathButton;
    private javax.swing.JTextField sSpyPathTField;
    private javax.swing.JButton saveParamButton;
    private javax.swing.JTextField schemaTField;
    private javax.swing.JButton showSchemaButton;
    private javax.swing.JButton startSSpyButton;
    private javax.swing.JTextField tNameRExTField;
    // End of variables declaration//GEN-END:variables

}
